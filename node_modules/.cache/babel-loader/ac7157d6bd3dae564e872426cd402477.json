{"ast":null,"code":"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\nclass JokeList extends Component {\n  // const [jokes, setJokes] = useState([]);\n  constructor(props) {\n    super(props);\n    this.state = {\n      jokes: []\n    };\n  }\n  /* get jokes if there are no jokes */\n  // useEffect(function() {\n\n\n  async getJokes() {\n    let j = this.state.jokes; // let seenJokes = this.state.jokes\n    // let seenJokes = new Set();\n\n    try {\n      let seenJokes = [];\n      let newJoke = {\n        text: null\n      }; //  while (j.length < numJokesToGet) {\n\n      for (let i = 0; i < numJokesToGet; i++) {\n        // let res = await axios.get(\"https://icanhazdadjoke.com\", {\n        //   headers: { Accept: \"application/json\" }\n        // });\n        // let { status, ...jokeObj } = res.data;\n        let joke = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: {\n            Accept: \"application/json\"\n          }\n        });\n\n        if (joke) {\n          console.log(joke.data);\n        } // let { status, ...jokeObj } = getJoke.data;\n\n      } // while (j.length < numJokesToGet) {\n      //   // let res = await axios.get(\"https://icanhazdadjoke.com\", {\n      //   //   headers: { Accept: \"application/json\" }\n      //   // });\n      //   // let { status, ...jokeObj } = res.data;\n      //   if (!seenJokes.has(jokeObj.id)) {\n      //     seenJokes.add(jokeObj.id);\n      //     j.push({ ...jokeObj, votes: 0 });\n      //   } else {\n      //     console.error(\"duplicate found!\");\n      //   }\n      // }\n      // setJokes(j);\n\n    } catch (e) {\n      console.log(e);\n    }\n  } // if (jokes.length === 0) getJokes();\n  // }, [jokes, numJokesToGet]);\n\n  /* empty joke list and then call getJokes */\n  // function generateNewJokes() {\n  //   setJokes([]);\n  // }\n\n  /* change vote for this id by delta (+1 or -1) */\n  // function vote(id, delta) {\n  //   setJokes(allJokes =>\n  //     allJokes.map(j => (j.id === id ? { ...j, votes: j.votes + delta } : j))\n  //   );\n  // }\n\n  /* render: either loading spinner or list of sorted jokes. */\n  // if (jokes.length) {\n  //   let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n  //   return (\n  //     <div className=\"JokeList\">\n  //       <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n  //         Get New Jokes\n  //       </button>\n  //       {sortedJokes.map(j => (\n  //         <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n  //       ))}\n  //     </div>\n  //   );\n  // }\n  // return null;\n\n\n}\n\nJokeList.defaultProps = {\n  numJokesToGet: 10\n};\nexport default JokeList;","map":{"version":3,"sources":["/home/kelly/Springboard/exercises/react-jokes-classes/src/JokeList.js"],"names":["React","Component","axios","Joke","JokeList","constructor","props","state","jokes","getJokes","j","seenJokes","newJoke","text","i","numJokesToGet","joke","get","headers","Accept","console","log","data","e","defaultProps"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,gBAAP;;AAGA,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;AAK/B;AACAI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AAGD;AAGD;AAEA;;;AACA,QAAMC,QAAN,GAAiB;AACf,QAAIC,CAAC,GAAG,KAAKH,KAAL,CAAWC,KAAnB,CADe,CAEf;AACA;;AAGA,QAAI;AAEF,UAAIG,SAAS,GAAG,EAAhB;AACA,UAAIC,OAAO,GAAG;AACZC,QAAAA,IAAI,EAAE;AADM,OAAd,CAHE,CAOF;;AACA,WAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGC,aAAlB,EAAiCD,CAAC,EAAlC,EAAsC;AAEpC;AACA;AACA;AACA;AACA,YAAIE,IAAI,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAU,4BAAV,EAAwC;AACvDC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,MAAM,EAAE;AAAV;AAD8C,SAAxC,CAAjB;;AAGA,YAAIH,IAAJ,EAAU;AACRI,UAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACM,IAAjB;AACD,SAXmC,CAYpC;;AACD,OArBC,CAuBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACH,KArCD,CAqCE,OAAOC,CAAP,EAAU;AACVH,MAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACD;AACF,GA/D8B,CAiE/B;AACA;;AAEA;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AApG+B;;AAA3BnB,Q,CACGoB,Y,GAAe;AACpBT,EAAAA,aAAa,EAAE;AADK,C;AAsGxB,eAAeX,QAAf","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\n\nclass JokeList extends Component {\n  static defaultProps = {\n    numJokesToGet: 10\n  }\n\n  // const [jokes, setJokes] = useState([]);\n  constructor(props) {\n    super(props);\n    this.state = {\n      jokes: []\n    }\n  }\n\n\n  /* get jokes if there are no jokes */\n\n  // useEffect(function() {\n  async getJokes() {\n    let j = this.state.jokes;\n    // let seenJokes = this.state.jokes\n    // let seenJokes = new Set();\n\n\n    try {\n\n      let seenJokes = []\n      let newJoke = {\n        text: null\n      }\n  \n      //  while (j.length < numJokesToGet) {\n      for (let i=0; i < numJokesToGet; i++) {\n\n        // let res = await axios.get(\"https://icanhazdadjoke.com\", {\n        //   headers: { Accept: \"application/json\" }\n        // });\n        // let { status, ...jokeObj } = res.data;\n        let joke = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: { Accept: \"application/json\" }\n        });\n        if (joke) {\n          console.log(joke.data)\n        }\n        // let { status, ...jokeObj } = getJoke.data;\n      }\n        \n        // while (j.length < numJokesToGet) {\n        //   // let res = await axios.get(\"https://icanhazdadjoke.com\", {\n        //   //   headers: { Accept: \"application/json\" }\n        //   // });\n        //   // let { status, ...jokeObj } = res.data;\n  \n        //   if (!seenJokes.has(jokeObj.id)) {\n        //     seenJokes.add(jokeObj.id);\n        //     j.push({ ...jokeObj, votes: 0 });\n        //   } else {\n        //     console.error(\"duplicate found!\");\n        //   }\n        // }\n        // setJokes(j);\n    } catch (e) {\n      console.log(e);\n    }\n  }  \n  \n  // if (jokes.length === 0) getJokes();\n  // }, [jokes, numJokesToGet]);\n\n  /* empty joke list and then call getJokes */\n\n  // function generateNewJokes() {\n  //   setJokes([]);\n  // }\n\n  /* change vote for this id by delta (+1 or -1) */\n\n  // function vote(id, delta) {\n  //   setJokes(allJokes =>\n  //     allJokes.map(j => (j.id === id ? { ...j, votes: j.votes + delta } : j))\n  //   );\n  // }\n\n  /* render: either loading spinner or list of sorted jokes. */\n\n  // if (jokes.length) {\n  //   let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n  \n  //   return (\n  //     <div className=\"JokeList\">\n  //       <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n  //         Get New Jokes\n  //       </button>\n  \n  //       {sortedJokes.map(j => (\n  //         <Joke text={j.joke} key={j.id} id={j.id} votes={j.votes} vote={vote} />\n  //       ))}\n  //     </div>\n  //   );\n  // }\n\n  // return null;\n}\n\nexport default JokeList;\n"]},"metadata":{},"sourceType":"module"}